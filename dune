;; `dirs` is a stanza to tell dune which subfolders from the current folder
;; (where the `dune` file is) it should process.
;; `:standard` is part of Dune's predicate language: https://dune.readthedocs.io/en/stable/reference/predicate-language.html#predicate-language
;; In the case of `dirs` stanza, `:standard` means "Process all subdirs, except those starting with underscore"
;; `\` operator will exclude the next value defined set.

;; With that in mind, we start by ignoring `node_modules`, because in most cases
;; there should be no `dune` files to be processed there by Dune.
;; If you need to consume an OCaml project from `node_modules`, this should work:
;; - remove the `dirs` stanza below
;; - add a `(subdir node_modules (dirs only_your_package))`

(dirs :standard \ node_modules data)

(melange.emit
 (target test_process)
 (libraries relude eval bindings utils))

; --display-separate-messages
;            Separate error messages with a blank line.

; --build-dir=FILE (absent DUNE_BUILD_DIR env)
;            Specified build directory. _build if unspecified

; --display=MODE
;            Control the display mode of Dune. See dune-config(5) for more
;            details. Valid values for this option are progress, verbose, short,
;            quiet or tui.

; --root=DIR
;            Use this directory as workspace root instead of guessing it. Note
;            that this option doesn't change the interpretation of targets given
;            on the command line. It is only intended for scripts.

; DUNE_BUILD_DIR
;            Specified build directory. _build if unspecified
